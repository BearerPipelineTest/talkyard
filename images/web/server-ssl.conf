# RENAME  to server-tls.conf  [ty_v1]


# ------ Why this extra file

# Google says: """Important: The following directives should be positioned after
# the certificate and key directives in the SSL/TLS server block of your virtual host file.
# If you've defined a certificate authority PEM file, position these directives after
# the ssl_trusted_certificate directive; otherwise, position them after the
# ssl_certificate_key directive"""
# (https://cloud.google.com/solutions/https-load-balancing-nginx, 2016-05-01)
#
# And Digital Ocean also says """The following directives must be placed after
# ssl_trusted_certificate""".
# https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-load-balancing-with-ssl-termination
#


# (Private key and public cerst files are included via sites-available/*.conf,
# not from here.)


# ------ Protocols
#
# # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
# ssl_dhparam /path/to/dhparam;
#
## Generated 2021-01-29, Mozilla Guideline v5.6, nginx 1.19.3, OpenSSL 1.1.1d,
## intermediate configuration,
## https://ssl-config.mozilla.org/#server=nginx&version=1.19.3&config=intermediate&openssl=1.1.1d&guideline=5.6
## https://mozilla.github.io/server-side-tls/ssl-config-generator/
## (All of SSL, TLSv1.0 and 1.1 are deprecated, not so secure.)
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

## This: ssl_prefer_server_ciphers — was needed only in the past, with
## TLS 1.0 and 1.1 which included insecure ciphers (but 1.2 and 1.3 don't).
## Nowadays, off is better, so a client can choose a method that works well
## with its hardware.  See: https://serverfault.com/a/997685
ssl_prefer_server_ciphers off;


# Test the SSL config here:   https://www.ssllabs.com/ssltest/
# should result in A+ grade.
# Update, 2021: Now, because of TLS 1.0 and 1.1, ssllabs capped the grade to B
# — but what happens hereafter with 1.0 and 1.1 disabled?
# https://www.ssllabs.com/ssltest/analyze.html?d=www.talkyard.io


# ------ Always HTTPS

# Don't:
# ## HSTS (ngx_http_headers_module is required) (63072000 seconds)
# add_header Strict-Transport-Security "max-age=63072000" always;
# because the risk that I'll mess something up is too high (as of 2016-05-01).


# ------ OCSP stapling

# ssl_stapling on;
# ssl_stapling_verify on;
#
# ## verify chain of trust of OCSP response using Root CA and Intermediate certs
# ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;
# # Or per domain? But how combine that with auto generated certs?
# ssl_trusted_certificate /etc/letsencrypt/domain/live/chain.pem


# ------ Gzip

# Could disable gzip for SSL traffic. See: https://bugs.debian.org/773332
# But no, I don't want to disable it. Instead, don't echo back too private stuff in responses.
#
# Read up on ssl_ciphers to ensure a secure configuration.
# See: https://bugs.debian.org/765782


# ------ In nginx.conf

# This configured in nginx.conf, for all vhosts:
# ssl_session_cache
# ssl_session_timeout
# ssl_session_tickets
# resolver 127.0.0.1  (Ty uses .11, because: Docker)

